[
  {
    "id": 0,
    "title": "JavaScript: Switch vs If Else",
    "date": "08 Nov 2022",
    "tag": "JavaScript, Condition",
    "img": "img01.png",
    "imgDesc": "Array item lookup versus using if-else or switch in Internet Explorer 7",
    "description": "It started when I looking in a github repository switch instead if else, I noticed that instead of the usual if else the author used switch even for a few checks. This made me to think which of these two, would be more optimal for me to use in the future projects",
    "text": [
      {"Conditionals": "Similar in nature to loops, conditionals determine how execution flows through JavaScript. The traditional argument of whether to use if-else statements or a switch statement applies to JavaScript just as it does to other languages. Since different browsers have implemented different flow control optimizations, it is not always clear which technique to use."},
      {"Some key advantages of switch over if-else ladder": "A switch statement works much faster than an equivalent if-else ladder. It's because the compiler generates a jump table for a switch during compilation. As a result, during execution, instead of checking which case is satisfied, it only decides which case has to be executed. It's more readable compared to if-else statements."},
      {"Final conclusion": "Sometimes the best approach to conditionals is to avoid using if-else and switch altogether. When there are a large number of discrete values for which to test, both if-else and switch are significantly slower than using a lookup table. Lookup tables can be created using arrays or regular objects in JavaScript, and accessing data from a lookup table is much faster than using if-else or switch, especially when the number of conditions is large"}
    ]
  },
  {
    "id": 1,
    "title": "Vue.js: Single-Page Application",
    "date": "09 Nov 2022",
    "tag": "Vue, Single-Page App",
    "img": "img02.png",
    "imgDesc": "The difference between the SPA and the traditional page",
    "description": "When I first time create a new vue project using CLI, it was offered to choose the application to be SPA. I found out about SPA then for the first time and I was interested to find out what it means. That was the main reason why I wrote this post.",
    "text": [
      {"Introduction in Vue": "Vue.js is a popular JavaScript framework for creating user interfaces. Created in 2014 by Evan You (formally of Google), Vue.js is often described as a combination of React and Angular, borrowing the prop-driven development of React and the templating power of Angular. This makes Vue an accessible framework for beginners to pick up, especially since it focuses on traditional HTML and CSS, rather than being a CSS-in-JS framework like React or relying on TypeScript (a superset of JavaScript) like Angular does."},
      {"Single-Page Application (SPA)": "Some applications require rich interactivity, deep session depth, and non-trivial stateful logic on the frontend. The best way to build such applications is to use an architecture where Vue not only controls the entire page, but also handles data updates and navigation without having to reload the page. This type of application is typically referred to as a Single-Page Application (SPA). Vue provides core libraries and comprehensive tooling support with amazing developer experience for building modern SPAs, including: Client-side router, Blazing fast build tool chain, IDE support, Browser devtools, TypeScript integrations, Testing utilities."},
      {"Final conclusion": " An SPA typically downloads the initial application code (HTML, CSS and JavaScript) from the server-side, and the subsequent resources are dynamically loaded to the page, usually in response to user actions. Speaking of the advantages of SPAs, sites with single page applications are more efficient in terms of processing, they can cost less than traditional MPA sites, and they demand less time from developers because they can use repetitive layouts and act as 'content on demand' apps."}
    ]
  }
]